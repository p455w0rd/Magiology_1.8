package com.magiology.windowsgui;

import java.awt.Color;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.Frame;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.RenderingHints;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import java.awt.event.MouseWheelEvent;
import java.awt.event.MouseWheelListener;
import java.awt.event.WindowEvent;

import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.WindowConstants;

import com.magiology.core.MReference;
import com.magiology.core.Magiology;
import com.magiology.io.IOReadableMap;
import com.magiology.io.ZipManager;

public class ModInfoGUI extends JFrame{
	JTextField item1;
	JButton button1;
	JButton up;
	JButton down;
	JCheckBox CB1;
	boolean CB1Last=false;
	Renderer visual;
	FlowLayout layout=new FlowLayout();
	String SExitOn="";
	JComboBox dropDown;
	int dropDownID,commandID;
	public String[] comands={"clearUserInput()","Set font size:","Set side:","selectCommand()","useCommand()","printCommands()","printValues()"};
	TheHandler1 handeler1=new TheHandler1(this);
	TheHandler3 mouseEvents=new TheHandler3();
	TheHandler4 keyEvents=new TheHandler4();
	ImageIcon[] imageIcons=null;
	int txtSize=18,offset=0;
	public int exitOn=0;
	public long systemTime=-1;
	public boolean isExited=false,first=false,autoRemove=false,autoActivate=false,isMuted=false,MCStat=false,modStat=false,MCStat2=false,modStat2=false;
	
	public Line[] lines=new Line[200];
	
	
	public ModInfoGUI(int x,int y,int xPos,int yPos){
		this();
		int width=548,height=384;
		x/=2;y/=2;
		x-=width/2;
		y-=height/2;
		x+=xPos;y+=yPos;
		setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
		setSize(width,height);
		setLocation(new Point(x,y));
		setUndecorated(true);
		setVisible(true);
	}
	private ModInfoGUI(){
		super(MReference.NAME+" graphical interface");
		imageIcons=ZipManager.getAllImagesFromZip(MReference.MODS_SUBFOLDER_WIN_GUI+"/MagiZip");
		setCursor(Toolkit.getDefaultToolkit().createCustomCursor(imageIcons[2].getImage(), new Point(0,1), "sword"));
		
		setContentPane(visual=new Renderer(this));
		
		
		visual.addMouseListener(mouseEvents);
		visual.addMouseMotionListener(mouseEvents);
		visual.addMouseWheelListener(mouseEvents);
		addKeyListener(keyEvents);
		setFocusable(true);
		Magiology.modInfGUI=this;
//		SoundPlayer.playSound(MReference.MODS_SUBFOLDER_WIN_GUI+"/OpenUp.wav");
	}
	
	public void downloadData(IOReadableMap infoFile){
		if(infoFile.getI("GUITxtSize")==0)infoFile.set("GUITxtSize", 18);
		txtSize=infoFile.getI("GUITxtSize");
		autoRemove=infoFile.getB("GUIAR");
		autoActivate=infoFile.getB("GUIAA");
		if(infoFile.getI("GUIExitOn")==0)infoFile.set("GUIExitOn", 2);
		exitOn=infoFile.getI("GUIExitOn");
		item1.setText("Press Enter to use!");
		
		if(txtSize==-1){
			txtSize=19;
			infoFile.set("GUITxtSize",txtSize);
			infoFile.writeToFile();
		}
		Update();
	}
	public void clear(){
		for(int b=0;b<lines.length;b++)lines[b]=newLine("", Color.WHITE);
		item1.setText("");
	}
	public void Update(){
		if(isExited)return;
		Magiology.modInfGUI=this;
		for(int b=0;b<lines.length;b++)if(lines[b]==null)lines[b]=newLine("", Color.WHITE);
		SwingUtilities.invokeLater(new Runnable(){@Override public void run(){SwingUtilities.updateComponentTreeUI(ModInfoGUI.this);}});
	}
	
	public void exit(){
		if(isExited)return;
		Frame[] window=Frame.getFrames();
		for(Frame a:window)if(tryToExit(a)){
			Magiology.modInfGUI=null;
			return;
		}
	}
	public boolean tryToExit(Frame frame){
		if(isExited)return false;
		if(frame==this){
			Update();
			Magiology.infoFile.writeToFile();
			SoundPlayer.playSound(MReference.MODS_SUBFOLDER_WIN_GUI+"/Close.wav");
			dispatchEvent(new WindowEvent(frame, WindowEvent.WINDOW_CLOSING));
			isExited=true;
			return true;
		}return false;
	}
	private class TheHandler1 implements ActionListener{
		ModInfoGUI gui;
		public TheHandler1(ModInfoGUI modInfoGUI){
			gui=modInfoGUI;
		}
		@Override
		public void actionPerformed(ActionEvent event){
			
		}
	}
	private class TheHandler3 implements MouseMotionListener, MouseListener, MouseWheelListener{
		int lastMousePos;
		@Override
		public void mouseWheelMoved(MouseWheelEvent e){
			
		}
		@Override public void mouseClicked(MouseEvent e){}
		@Override public void mouseEntered(MouseEvent e){}
		@Override public void mouseExited(MouseEvent e){}
		@Override public void mousePressed(MouseEvent e){}
		@Override public void mouseReleased(MouseEvent e){}
		@Override
		public void mouseDragged(MouseEvent e){
			lastMousePos=e.getYOnScreen();
		}
		@Override
		public void mouseMoved(MouseEvent e){
			lastMousePos=e.getYOnScreen();
		}
	}
	private class TheHandler4 implements KeyListener{
		@Override public void keyPressed(KeyEvent e){}
		@Override public void keyReleased(KeyEvent e){}
		@Override public void keyTyped(KeyEvent e){}
	}
	private class Renderer extends JLabel{
		private final ModInfoGUI gui;
		public Renderer(ModInfoGUI gui){
			super(imageIcons[0]);
			this.gui=gui;
		}
		@Override
		public void paintComponent(Graphics g){
			
			if(g instanceof Graphics2D){
				((Graphics2D)g).setRenderingHint(RenderingHints.KEY_TEXT_ANTIALIASING, RenderingHints.VALUE_TEXT_ANTIALIAS_ON);
			}
			
			super.paintComponent(g);
			int offset=txtSize/15;if(offset==0)offset=1;
			for(int a=0;a<lines.length;a++)if(lines[a]!=null){
				if(lines[a].font.getSize()!=gui.txtSize){
					Font font=lines[a].font;
					Font newFont=new Font(font.getName(),font.getStyle(),gui.txtSize);
					lines[a].font=newFont;
				}
				
				g.setFont(lines[a].font);
				g.translate(0, gui.offset);
				for(int k=0;k<2;k++){
					if(k==1)g.setColor(lines[a].color);
					else{
						g.setColor(Color.BLACK);
						g.translate(1, 1);
					}
					g.drawString(lines[a].string, 14, 340-g.getFont().getSize()*a);
					if(k==0)g.translate(-1,-1);
				}
				g.translate(0, -gui.offset);
			}
			g.drawImage(imageIcons[4].getImage(), 0, 0, this);
			g.setFont(new Font(Font.SANS_SERIF, Font.BOLD,12));
			for(int a=0;a<2;a++){
				if(a==1)g.setColor(Color.LIGHT_GRAY);
				else{
					g.setColor(Color.BLACK);
					g.translate(1, 1);
				}
				g.drawString(MReference.MODID+" status: "+(modStat?"Loaded!":"Loading..."), 390, 45);
				g.drawString("MC status: "+(MCStat?"Loaded!":"Loading..."), 394, 60);
				if(a==0)g.translate(-1,-1);
			}
			if(MCStat!=MCStat2){
				MCStat2=MCStat;
				SoundPlayer.playSound(MReference.MODS_SUBFOLDER_WIN_GUI+"/Loaded.wav");
			}
			if(modStat!=modStat2){
				modStat2=modStat;
				SoundPlayer.playSound(MReference.MODS_SUBFOLDER_WIN_GUI+"/Loaded.wav");
			}
		}
		
	}
	public Line newLine(String string,Font font,Color color){return new Line(string, font,color,false);}
	public Line newLine(String string,Font font,Color color,boolean isUserCasted){return new Line(string, font,color,isUserCasted);}
	public Line newLine(String string,Color color,boolean isUserCasted){return new Line(string, new Font(Font.SANS_SERIF, Font.PLAIN,15),color,isUserCasted);}
	public Line newLine(String string,Color color){return new Line(string, new Font(Font.SANS_SERIF, Font.PLAIN,15),color,false);}
	public static class Line{
		public String string;
		public Font font;
		public Color color;
		public boolean isUserCasted;
		public Line(String string,Font font,Color color,boolean isUserCasted){
			this.string=string;
			this.font=font;
			this.color=color;
			this.isUserCasted=isUserCasted;
		}
	}
}
