package com.magiology.api.connection;

import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.magiology.objhelper.helpers.SideHelper;

import net.minecraft.tileentity.TileEntity;
import net.minecraft.util.EnumFacing;

//IConnection code holder
public class Connection implements IConnection{
	
	private final EnumFacing face;
	private final ConnectionType type;
	private final IConnectionProvider host;
	
	private boolean main,in,out,banned,changeableByUser,isMainAutomatic;
	private Map<String, Object> extra=new HashMap<String, Object>();
	
	public Connection(IConnectionProvider host,ConnectionType type,int side){
		this(host, type, EnumFacing.getFront(side));
	}
	public Connection(IConnectionProvider host,ConnectionType type,EnumFacing side){
		this.type=type;
		this.face=side;
		this.host=host;
	}
	
	@Override
	public boolean hasOpposite(){
		IConnection[] mates=getMates();
		return mates[SideHelper.getOppositeSide(getFaceI())].isActive();
	}
	@Override 
	public void setIn(boolean var){
		in=var;
		fixMain();
	}
	@Override 
	public void setOut(boolean var){
		out=var;
		fixMain();
	}
	@Override
	public boolean isActive(){
		if(isMainAutomatic()){
			if(getMain())return true;
		}else{
			if(getIn()||getOut())return true;
		}
		return false;
	}
	
	private void fixMain(){
		if(isMainAutomatic())return;
		setMain(getIn()||getOut());
	}
	private int getActiveMates(){
		int result=0;
		for(IConnection i:getMates())if(i.isActive())result++;
		return result;
	}

	@Override public boolean getIn(){return in;}
	@Override public boolean getOut(){return out;}
	@Override public boolean getMain(){return main;}
	@Override public boolean isBanned(){return banned;}
	@Override public void setMain(boolean var){main=var;}
	@Override public EnumFacing getFaceEF(){return face;}
	@Override public ConnectionType getType(){return type;}
	@Override public int getFaceI(){return face.getIndex();}
	@Override public void setIsBanned(boolean var){banned=var;}
	@Override public IConnectionProvider getHost(){return host;}
	@Override public boolean isEnding(){return getActiveMates()==1;}
	@Override public boolean isMainAutomatic(){return isMainAutomatic;}
	@Override public boolean isIntersection(){return getActiveMates()>2;}
	@Override public IConnection[] getMates(){return host.getConnections();}
	@Override public boolean getChangeableByUser(){return changeableByUser;}
	@Override public void setIsMainAutomatic(boolean var){isMainAutomatic=var;}
	@Override public void setChangeableByUser(boolean var){changeableByUser=var;}
	@Override
	public Object getExtra(String tag){
		return extra.get(tag);
	}
	@Override
	public void setExtra(String tag, Object obj){
		extra.put(tag, obj);
	}
	@Override
	public Collection<Object> getAllExtra(){
		return extra.values();
	}
}