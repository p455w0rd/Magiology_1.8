package com.magiology.util.utilobjects;

import net.minecraft.item.ItemStack;
import net.minecraft.nbt.NBTTagCompound;

public class NBTUtil{
	public static boolean hasNBT(ItemStack stack){
		return stack!=null&&getNBT(stack)!=null;
	}
	public static NBTTagCompound getNBT(ItemStack stack){
		return getNBT(stack);
	}
	public static boolean hasTag(ItemStack stack, String key){
		return hasNBT(stack)&&getNBT(stack).hasKey(key);
	}
	public static void removeTag(ItemStack stack, String key){
		if(hasNBT(stack))getNBT(stack).removeTag(key);
	}
	
	public static void setLong(ItemStack stack, String key, long keyValue){
		createNBT(stack);
		getNBT(stack).setLong(key, keyValue);
	  }

	public static String getString(ItemStack stack, String key)
	{
		createNBT(stack);

		if (!getNBT(stack).hasKey(key))
		{
			setString(stack, key, "");
		}

		return getNBT(stack).getString(key);
	}

	public static void setString(ItemStack stack, String key, String keyValue)
	{
		createNBT(stack);

		getNBT(stack).setString(key, keyValue);
	}

	public static boolean getBoolean(ItemStack stack, String key)
	{
		createNBT(stack);

		if (!getNBT(stack).hasKey(key))
		{
			setBoolean(stack, key, false);
		}

		return getNBT(stack).getBoolean(key);
	}

	public static void setBoolean(ItemStack stack, String key, boolean keyValue)
	{
		createNBT(stack);

		getNBT(stack).setBoolean(key, keyValue);
	}

	public static byte getByte(ItemStack stack, String key)
	{
		createNBT(stack);

		if (!getNBT(stack).hasKey(key))
		{
			setByte(stack, key, (byte) 0);
		}

		return getNBT(stack).getByte(key);
	}

	public static void setByte(ItemStack stack, String key, byte keyValue)
	{
		createNBT(stack);

		getNBT(stack).setByte(key, keyValue);
	}

	public static short getShort(ItemStack stack, String key)
	{
		createNBT(stack);

		if (!getNBT(stack).hasKey(key))
		{
			setShort(stack, key, (short) 0);
		}

		return getNBT(stack).getShort(key);
	}

	public static void setShort(ItemStack stack, String key, short keyValue)
	{
		createNBT(stack);

		getNBT(stack).setShort(key, keyValue);
	}

	public static int getInt(ItemStack stack, String key)
	{
		createNBT(stack);

		if (!getNBT(stack).hasKey(key))
		{
			setInteger(stack, key, 0);
		}

		return getNBT(stack).getInteger(key);
	}

	public static void setInteger(ItemStack stack, String key, int keyValue)
	{
		createNBT(stack);

		getNBT(stack).setInteger(key, keyValue);
	}

	public static long getLong(ItemStack stack, String key)
	{
		createNBT(stack);

		if (!getNBT(stack).hasKey(key))
		{
			setLong(stack, key, 0);
		}

		return getNBT(stack).getLong(key);
	}

	public static float getFloat(ItemStack stack, String key)
	{
		createNBT(stack);

		if (!getNBT(stack).hasKey(key))
		{
			setFloat(stack, key, 0);
		}

		return getNBT(stack).getFloat(key);
	}

	public static void setFloat(ItemStack stack, String key, float keyValue)
	{
		createNBT(stack);

		getNBT(stack).setFloat(key, keyValue);
	}

	public static double getDouble(ItemStack stack, String key)
	{
		createNBT(stack);

		if (!getNBT(stack).hasKey(key))
		{
			setDouble(stack, key, 0);
		}

		return getNBT(stack).getDouble(key);
	}

	public static void setDouble(ItemStack stack, String key, double keyValue)
	{
		createNBT(stack);

		getNBT(stack).setDouble(key, keyValue);
	}
	public static boolean createNBT(ItemStack a){
		if(!a.hasTagCompound())a.setTagCompound(new NBTTagCompound());
		return a.hasTagCompound();
	}
}
