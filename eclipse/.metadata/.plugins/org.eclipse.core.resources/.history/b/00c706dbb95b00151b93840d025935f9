package com.magiology.util.utilobjects;

import net.minecraft.item.ItemStack;
import net.minecraft.nbt.NBTTagCompound;

public class NBTUtil{
	public static boolean hasNBT(ItemStack stack){
		return stack!=null&&stack.getTagCompound()!=null;
	}
	public static boolean hasTag(ItemStack stack, String key){
        return hasNBT(stack)&&stack.getTagCompound().hasKey(key);
    }
    public static void removeTag(ItemStack stack, String key){
        if(hasNBT(stack))stack.getTagCompound().removeTag(key);
    }
    

    public static void setLong(ItemStack stack, String key, long keyValue)
    {
        createNBT(stack);

        stack.getTagCompound().setLong(key, keyValue);
    }

    public static String getString(ItemStack stack, String key)
    {
        createNBT(stack);

        if (!stack.getTagCompound().hasKey(key))
        {
            setString(stack, key, "");
        }

        return stack.getTagCompound().getString(key);
    }

    public static void setString(ItemStack stack, String key, String keyValue)
    {
        createNBT(stack);

        stack.getTagCompound().setString(key, keyValue);
    }

    public static boolean getBoolean(ItemStack stack, String key)
    {
        createNBT(stack);

        if (!stack.getTagCompound().hasKey(key))
        {
            setBoolean(stack, key, false);
        }

        return stack.getTagCompound().getBoolean(key);
    }

    public static void setBoolean(ItemStack stack, String key, boolean keyValue)
    {
        createNBT(stack);

        stack.getTagCompound().setBoolean(key, keyValue);
    }

    public static byte getByte(ItemStack stack, String key)
    {
        createNBT(stack);

        if (!stack.getTagCompound().hasKey(key))
        {
            setByte(stack, key, (byte) 0);
        }

        return stack.getTagCompound().getByte(key);
    }

    public static void setByte(ItemStack stack, String key, byte keyValue)
    {
        createNBT(stack);

        stack.getTagCompound().setByte(key, keyValue);
    }

    public static short getShort(ItemStack stack, String key)
    {
        createNBT(stack);

        if (!stack.getTagCompound().hasKey(key))
        {
            setShort(stack, key, (short) 0);
        }

        return stack.getTagCompound().getShort(key);
    }

    public static void setShort(ItemStack stack, String key, short keyValue)
    {
        createNBT(stack);

        stack.getTagCompound().setShort(key, keyValue);
    }

    public static int getInt(ItemStack stack, String key)
    {
        createNBT(stack);

        if (!stack.getTagCompound().hasKey(key))
        {
            setInteger(stack, key, 0);
        }

        return stack.getTagCompound().getInteger(key);
    }

    public static void setInteger(ItemStack stack, String key, int keyValue)
    {
        createNBT(stack);

        stack.getTagCompound().setInteger(key, keyValue);
    }

    public static long getLong(ItemStack stack, String key)
    {
        createNBT(stack);

        if (!stack.getTagCompound().hasKey(key))
        {
            setLong(stack, key, 0);
        }

        return stack.getTagCompound().getLong(key);
    }

    public static float getFloat(ItemStack stack, String key)
    {
        createNBT(stack);

        if (!stack.getTagCompound().hasKey(key))
        {
            setFloat(stack, key, 0);
        }

        return stack.getTagCompound().getFloat(key);
    }

    public static void setFloat(ItemStack stack, String key, float keyValue)
    {
        createNBT(stack);

        stack.getTagCompound().setFloat(key, keyValue);
    }

    public static double getDouble(ItemStack stack, String key)
    {
        createNBT(stack);

        if (!stack.getTagCompound().hasKey(key))
        {
            setDouble(stack, key, 0);
        }

        return stack.getTagCompound().getDouble(key);
    }

    public static void setDouble(ItemStack stack, String key, double keyValue)
    {
        createNBT(stack);

        stack.getTagCompound().setDouble(key, keyValue);
    }
	public static boolean createNBT(ItemStack a){
		if(!a.hasTagCompound())a.setTagCompound(new NBTTagCompound());
		return a.hasTagCompound();
	}
}
