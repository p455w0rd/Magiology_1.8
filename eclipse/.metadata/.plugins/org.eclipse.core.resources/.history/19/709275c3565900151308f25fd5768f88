package com.magiology.util.utilclasses.math;

import com.magiology.util.utilclasses.Helper.H;

public class ObjectCalculator{
	
	public static Object calc(final Object left,final Object right, final char type){
		Class lc=left.getClass(),rc=right.getClass();
		if(H.isArray(lc)||H.isArray(rc))return calcArray(left, right, lc, rc, type);
		else return calcNormal(left, right, lc, rc, type);
		
	}
	private static Object calcArray(final Object left,final Object right, final Class lc, final Class rc, final char type){
		
		if(left instanceof float[]&&right instanceof float[])return ArrayMath.calc((float[])left, (float[])right, type);
		if(left instanceof float[]&&right instanceof Float)return ArrayMath.calc((float[])left, (Float)right, type);
		if(left instanceof Float&&right instanceof float[])return ArrayMath.calc((Float)left, (float[])right, type);
		
		if(left instanceof int[]&&right instanceof int[])return ArrayMath.calc((int[])left, (int[])right, type);
		if(left instanceof int[]&&right instanceof Integer)return ArrayMath.calc((int[])left, (Integer)right, type);
		if(left instanceof Integer&&right instanceof int[])return ArrayMath.calc((Integer)left, (int[])right, type);
		
		if(left instanceof double[]&&right instanceof double[])return ArrayMath.calc((double[])left, (double[])right, type);
		if(left instanceof double[]&&right instanceof Double)return ArrayMath.calc((double[])left, (Double)right, type);
		if(left instanceof Double&&right instanceof double[])return ArrayMath.calc((Double)left, (double[])right, type);
		
		if(left instanceof long[]&&right instanceof long[])return ArrayMath.calc((long[])left, (long[])right, type);
		if(left instanceof long[]&&right instanceof Long)return ArrayMath.calc((long[])left, (Long)right, type);
		if(left instanceof Long&&right instanceof long[])return ArrayMath.calc((Long)left, (long[])right, type);
		
		return null;
	}
	private static Object calcNormal(final Object left,final Object right, final Class lc, final Class rc, final char type){
		return null;
	}
}
