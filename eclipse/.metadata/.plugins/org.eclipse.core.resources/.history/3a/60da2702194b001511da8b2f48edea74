package com.magiology.handelers;

import static com.magiology.core.MReference.*;

import java.io.BufferedInputStream;
import java.io.BufferedReader;
import java.io.FileOutputStream;
import java.io.InputStreamReader;
import java.net.URL;
import java.net.URLConnection;
import java.util.Scanner;

import com.magiology.objhelper.helpers.Helper;


public class DownloadingHandeler{
	public static void downladAssets(){
		downloadAndSaveToDisc(MODS_SUBFOLDER_WIN_GUI+"/Close.wav",  "http://ge.tt/api/1/files/7cGVjlM2/3/blob?download");
		downloadAndSaveToDisc(MODS_SUBFOLDER_WIN_GUI+"/Loaded.wav", "http://ge.tt/api/1/files/7cGVjlM2/0/blob?download");
		downloadAndSaveToDisc(MODS_SUBFOLDER_WIN_GUI+"/MagiZip.zip","http://ge.tt/api/1/files/7cGVjlM2/1/blob?download");
		downloadAndSaveToDisc(MODS_SUBFOLDER_WIN_GUI+"/OpenUp.wav", "http://ge.tt/api/1/files/7cGVjlM2/2/blob?download");
	}
	public static void downloadUpdater(){
		downloadAndSaveToDisc(UPDATER_DIR, "http://ge.tt/api/1/files/7cGVjlM2/9/blob?download");
	}
	
	public static String findValue(String tag){
		try{
			URL url=new URL("https://raw.githubusercontent.com/LapisSea/Magiology_1.8/master/src/main/java/com/magiology/core/MReference.java");
			Scanner s=new Scanner(url.openStream());
			String value=null;
			try{
				s.findWithinHorizon(tag+"=", 9999);
				value=s.next();
				value=value.substring(1, value.length()-2);
			}catch(Exception e){}
			s.close();
			return value;
		}catch(Exception ex){}
		return null;
	}
	public static void downloadAndSaveToDiscAutoName(String fileName,String URL){
		String[] split=URL.split("/");
		fileName+="/"+split[split.length-1];
		downloadAndSaveToDisc(fileName, URL);
	}
//	public static void downloadAndSaveToDisc(String fileName,String URL){
//		try{
//			String folder="";
//			for(String i:fileName.split("/"))folder+=i+"/";
//			new File(folder).mkdir();
//			
//			
//			URL url = new URL(URL);
//			URLConnection urlCon = url.openConnection();
//			InputStream is = urlCon.getInputStream();
//			FileOutputStream fos = new FileOutputStream(fileName);
//			byte[] buffer = new byte[1000];         
//			int bytesRead = is.read(buffer);
//			while (bytesRead > 0){
//				fos.write(buffer, 0, bytesRead);
//				bytesRead = is.read(buffer);
//			}
//			is.close();
//			fos.close();
//		}catch(Exception e){
//			e.printStackTrace();
//		}
//	}
	public static final class MediaFireDownlader{
		private MediaFireDownlader(){}
		public void downladAndName(String filePath,String URL){
			filePath+=URL.substring(URL.lastIndexOf("/"));
			downlad(filePath, URL);
		}
		public void downlad(String filePath,String URL){
	        try{
	            String downloadLink=findingValidLink(getUrlSrc(URL));
	            saveToDisc(downloadLink,filePath);
	        }catch(Exception e){e.printStackTrace();}
	    }
		
		
		private void saveToDisc(String filePath,String URL)throws Exception{
	        Helper.println("Downloading "+filePath.substring(filePath.lastIndexOf("/")));
	        BufferedInputStream in=null;
	        FileOutputStream fout=null;
	        try{
	            in=new BufferedInputStream(new URL(URL).openStream());
	            fout=new FileOutputStream(filePath);
	            final byte data[]=new byte[1024];
	            int count;
	            while(-1!=(count=in.read(data, 0, 1024)))fout.write(data, 0, count);
	        }finally{
	            if(in!=null)in.close();
	            if (fout!=null)fout.close();
	        }
	        Helper.println(filePath.substring(filePath.lastIndexOf("/"))+" is successfuly downladed!");
	    }
		private static String getUrlSrc(String URL)throws Exception{
	        Helper.println("Connecting to "+URL);
	        URL link=new URL(URL);
	        URLConnection linkCon=link.openConnection();
	        BufferedReader reader=new BufferedReader(new InputStreamReader(linkCon.getInputStream(), "UTF-8"));
	        String inputLine,total="";
	        while((inputLine=reader.readLine())!=null)total+=inputLine;
	        reader.close();
	        return total;
	    }
	    private static String findingValidLink(String string){
	        Helper.println("Fetching download link: "+string);
	        try{
	            String code="(?=\\<)|(?<=\\>)";
	            String data[]=string.split(code);
	            String status="NOTFOUND";
	            for(String data1:data)if(data1.contains("DLP_mOnDownload(this)")){
	            	status=data1;
	            	break;
	            }
	            String cleanVersion=status.substring(status.indexOf("href=\"")+6);
	            cleanVersion=cleanVersion.substring(0, cleanVersion.indexOf("\""));
	            return cleanVersion;
	        }catch(Exception e){
	            e.printStackTrace();
	            return "ERROR";
	        }
	    }
	}
}
