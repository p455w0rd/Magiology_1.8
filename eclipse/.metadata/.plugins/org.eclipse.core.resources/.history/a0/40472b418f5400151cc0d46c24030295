package com.magiology.gui.guiutil.gui.buttons;

import java.awt.Color;

import org.lwjgl.opengl.GL11;

import com.magiology.util.renderers.GL11H;
import com.magiology.util.utilclasses.Get;
import com.magiology.util.utilclasses.Helper.H;
import com.magiology.util.utilobjects.ColorF;

import net.minecraft.client.Minecraft;
import net.minecraft.client.gui.FontRenderer;
import net.minecraft.client.gui.GuiButton;
import net.minecraft.client.renderer.GlStateManager;
import net.minecraft.entity.item.EntityItem;

public class CleanButton extends GuiButton{
	
	public ColorF color,prevColor;
	public boolean[] enabledOutline={true,true,true,true};
	
	public CleanButton(int buttonId, int x, int y, String buttonText, ColorF color){
		super(buttonId, x, y, buttonText);
		this.color=prevColor=color;
	}
	
	public CleanButton(int buttonId, int x, int y, int widthIn, int heightIn, String buttonText, ColorF color){
		super(buttonId, x, y, widthIn, heightIn, buttonText);
		this.color=prevColor=color;
	}
	
	@Override
	public void drawButton(Minecraft mc, int mouseX, int mouseY){
        if(this.visible){
            mc.getTextureManager().bindTexture(buttonTextures);
            this.hovered=mouseX>=this.xPosition&&mouseY>=this.yPosition&&mouseX<this.xPosition+this.width&&mouseY<this.yPosition+this.height;
            int k = this.getHoverState(this.hovered);
            GL11H.blend(true);
            GL11H.blendFunc(1);
            ColorF color=H.calculateRenderColor(prevColor, this.color);
            GL11H.color(color);
            GL11.glPushMatrix();
            GL11H.texture(false);
            this.drawTexturedModalRect(this.xPosition, this.yPosition, 0, 0, this.width, this.height);
            GL11H.texture(true);
            this.mouseDragged(mc, mouseX, mouseY);
            int l = 14737632;

            if(packedFGColour!= 0)l=packedFGColour;
            else if(!this.enabled)l=10526880;
            else if(this.hovered)l=16777120;
            
            this.drawCenteredString(Get.Render.FR(), this.displayString, this.xPosition + this.width / 2, this.yPosition + (this.height - 8) / 2, color.mix(new Color(l),1F/3F).toCode());
            GL11.glPopMatrix();
        }
    }
	
	
	
	public CleanButton setOutline(int side, boolean enabled){
		enabledOutline[side]=enabled;
		return this;
	}
	public CleanButton setOutline(boolean[] enabled){
		enabledOutline=enabled;
		return this;
	}
}
