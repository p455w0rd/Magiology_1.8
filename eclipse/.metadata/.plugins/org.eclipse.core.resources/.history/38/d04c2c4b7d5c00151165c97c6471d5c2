package com.magiology.util.utilobjects;

import java.awt.Color;

import org.lwjgl.opengl.GL11;

import com.magiology.util.utilclasses.Util;

public class ColorF{
	public static final ColorF 
		BLACK     =ColorF.convert(Color.BLACK),
		BLUE      =ColorF.convert(Color.BLUE),
		CYAN	  =ColorF.convert(Color.CYAN),
		DARK_GRAY =ColorF.convert(Color.DARK_GRAY),
		GRAY	  =ColorF.convert(Color.GRAY),
		GREEN	  =ColorF.convert(Color.GREEN),
		LIGHT_GRAY=ColorF.convert(Color.LIGHT_GRAY),
		MAGENTA	  =ColorF.convert(Color.MAGENTA),
		ORANGE	  =ColorF.convert(Color.ORANGE),
		PINK	  =ColorF.convert(Color.PINK),
		RED	  	  =ColorF.convert(Color.RED),
		WHITE	  =ColorF.convert(Color.WHITE),
		YELLOW	  =ColorF.convert(Color.YELLOW);
	public float r,g,b,a;
	
	public ColorF(double r, double g, double b, double a){
		this.r=(float)Util.keepValueInBounds(r, 0, 1);
		this.g=(float)Util.keepValueInBounds(g, 0, 1);
		this.b=(float)Util.keepValueInBounds(b, 0, 1);
		this.a=(float)Util.keepValueInBounds(a, 0, 1);
	}
	public ColorF(){
		this(1,1,1,1);
	}
	public ColorF blackNWhite(){
		float sum=(r+g+b)/3F;
		return new ColorF(sum,sum,sum,a);
	}
	public ColorF negative(){
		return new ColorF(1-r, 1-g, 1-b, 1-a);
	}
	public ColorF disablBlend(){
		return new ColorF(r,g,b,1);
	}
	public void bind(){
		GL11.glColor4f(r,g,b,a);
	}
	public int toCode(){
		return new Color(r,g,b,a).hashCode();
	}
	public ColorF mix(Color color){
		return mix(convert(color));
	}
	public ColorF mix(ColorF color){
		return new ColorF((r+color.r)/2F,(g+color.g)/2F,(b+color.b)/2F,(a+color.a)/2F);
	}
	public ColorF mix(Color color, float scale){
		return mix(convert(color),scale);
	}
	public ColorF mix(ColorF color, float scale){
		return new ColorF((r*scale+color.r/scale)/2F,(g*scale+color.g/scale)/2F,(b*scale+color.b/scale)/2F,(a*scale+color.a/scale)/2F);
	}
	public ColorF set(float modifier, char c){
		modifier=Util.keepValueInBounds(modifier, 0, 1);
		return new ColorF(c=='r'?modifier:r, c=='g'?modifier:g, c=='b'?modifier:b, c=='a'?modifier:a);
	}
	public ColorF copy(){
		return new ColorF(r, g, b, a);
	}
	@Override
	public String toString(){
		return "("+(r+"").substring(0, Math.min((r+"").length(),4))+", "+(g+"").substring(0, Math.min((g+"").length(),4))+", "+(b+"").substring(0, Math.min((b+"").length(),4))+", "+(a+"").substring(0, Math.min((a+"").length(),4))+")";
	}
	public static ColorF convert(Color color){
		return new ColorF((float)color.getRed()/256F, (float)color.getGreen()/256F, (float)color.getBlue()/256F, (float)color.getAlpha()/256F);
	}
	public ColorF mul(double r, double g, double b, double a){
		return new ColorF(this.r*r, this.g*g, this.b*b, this.a*a);
	}
	public ColorF mul(double var){
		return new ColorF(r*var, g*var, b*var, a*var);
	}
}
