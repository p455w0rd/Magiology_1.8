package com.magiology.util.utilclasses.math;

import java.util.HashSet;
import java.util.Set;

import com.magiology.util.utilclasses.Helper.H;

public class ObjectCalculator{
	private static final char mul='*',div='/',add='+',sub='-';
	
	public static Object calc(final Object left,final Object right, final char type){
		Class lc=left.getClass(),rc=right.getClass();
		if(!isSupported(lc)||!isSupported(rc))throw new IllegalStateException("ObjectCalculator has taken unsuported or invalid object type! "+left+" or/and "+right);
		boolean arrayL=H.isArray(lc),arrayR=H.isArray(rc);
		if(arrayL||arrayR)return calcArray(left, right, type, arrayL, arrayR);
		else return calcNormal(left, right, type);
	}
	private static Object calcArray(final Object left,final Object right, final char type, final boolean arrayL, final boolean arrayR){
		
		if(left instanceof float[]&&right instanceof Double)return ArrayMath.calc((float[])left, (Double)right, type);
		if(left instanceof Double&&right instanceof float[])return ArrayMath.calc((Double)left, (float[])right, type);
		
		if(left instanceof float[]&&right instanceof float[])return ArrayMath.calc((float[])left, (float[])right, type);
		if(left instanceof float[  ]&&right instanceof Float)return ArrayMath.calc((float[])left, (Float)right, type);
		if(left instanceof Float&&right instanceof float[  ])return ArrayMath.calc((Float)left, (float[])right, type);
		
		if(left instanceof int[ ]&&right instanceof int[ ])return ArrayMath.calc((int[])left, (int[])right, type);
		if(left instanceof int[]&&right instanceof Integer)return ArrayMath.calc((int[])left, (Integer)right, type);
		if(left instanceof Integer&&right instanceof int[])return ArrayMath.calc((Integer)left, (int[])right, type);
		
		if(left instanceof double[]&&right instanceof double[])return ArrayMath.calc((double[])left, (double[])right, type);
		if(left instanceof double[  ]&&right instanceof Double)return ArrayMath.calc((double[])left, (Double)right, type);
		if(left instanceof Double&&right instanceof double[  ])return ArrayMath.calc((Double)left, (double[])right, type);
		
		if(left instanceof long[]&&right instanceof long[])return ArrayMath.calc((long[])left, (long[])right, type);
		if(left instanceof long[  ]&&right instanceof Long)return ArrayMath.calc((long[])left, (Long)right, type);
		if(left instanceof Long&&right instanceof long[  ])return ArrayMath.calc((Long)left, (long[])right, type);
		
		throw new IllegalStateException("ObjectCalculator has taken unsuported or invalid object type! "+left+" or/and "+right);
	}
	private static Object calcNormal(final Object left,final Object right, final char type){
		
		if(left instanceof Float&&right instanceof Float){
			if(type==mul)return((Float)left)*((Float)right);
			if(type==div)return((Float)left)/((Float)right);
			if(type==add)return((Float)left)+((Float)right);
			if(type==sub)return((Float)left)-((Float)right);
		}
		if(left instanceof Float&&right instanceof Integer){
			if(type==mul)return((Float)left)*((Integer)right);
			if(type==div)return((Float)left)/((Integer)right);
			if(type==add)return((Float)left)+((Integer)right);
			if(type==sub)return((Float)left)-((Integer)right);
		}
		if(left instanceof Float&&right instanceof Double){
			if(type==mul)return((Float)left)*((Double)right);
			if(type==div)return((Float)left)/((Double)right);
			if(type==add)return((Float)left)+((Double)right);
			if(type==sub)return((Float)left)-((Double)right);
		}
		if(left instanceof Float&&right instanceof Long){
			if(type==mul)return((Float)left)*((Long)right);
			if(type==div)return((Float)left)/((Long)right);
			if(type==add)return((Float)left)+((Long)right);
			if(type==sub)return((Float)left)-((Long)right);
		}
		
		if(left instanceof Integer&&right instanceof Integer){
			if(type==mul)return((Integer)left)*((Integer)right);
			if(type==div)return((Integer)left)/((Integer)right);
			if(type==add)return((Integer)left)+((Integer)right);
			if(type==sub)return((Integer)left)-((Integer)right);
		}
		if(left instanceof Integer&&right instanceof Float){
			if(type==mul)return((Integer)left)*((Float)right);
			if(type==div)return((Integer)left)/((Float)right);
			if(type==add)return((Integer)left)+((Float)right);
			if(type==sub)return((Integer)left)-((Float)right);
		}
		if(left instanceof Integer&&right instanceof Double){
			if(type==mul)return((Integer)left)*((Double)right);
			if(type==div)return((Integer)left)/((Double)right);
			if(type==add)return((Integer)left)+((Double)right);
			if(type==sub)return((Integer)left)-((Double)right);
		}
		if(left instanceof Integer&&right instanceof Long){
			if(type==mul)return((Integer)left)*((Long)right);
			if(type==div)return((Integer)left)/((Long)right);
			if(type==add)return((Integer)left)+((Long)right);
			if(type==sub)return((Integer)left)-((Long)right);
		}
		
		if(left instanceof Double&&right instanceof Double){
			if(type==mul)return((Double)left)*((Double)right);
			if(type==div)return((Double)left)/((Double)right);
			if(type==add)return((Double)left)+((Double)right);
			if(type==sub)return((Double)left)-((Double)right);
		}
		if(left instanceof Double&&right instanceof Float){
			if(type==mul)return((Double)left)*((Float)right);
			if(type==div)return((Double)left)/((Float)right);
			if(type==add)return((Double)left)+((Float)right);
			if(type==sub)return((Double)left)-((Float)right);
		}
		if(left instanceof Double&&right instanceof Integer){
			if(type==mul)return((Double)left)*((Integer)right);
			if(type==div)return((Double)left)/((Integer)right);
			if(type==add)return((Double)left)+((Integer)right);
			if(type==sub)return((Double)left)-((Integer)right);
		}
		if(left instanceof Double&&right instanceof Long){
			if(type==mul)return((Double)left)*((Long)right);
			if(type==div)return((Double)left)/((Long)right);
			if(type==add)return((Double)left)+((Long)right);
			if(type==sub)return((Double)left)-((Long)right);
		}
		
		if(left instanceof Long&&right instanceof Long){
			if(type==mul)return((Long)left)*((Long)right);
			if(type==div)return((Long)left)/((Long)right);
			if(type==add)return((Long)left)+((Long)right);
			if(type==sub)return((Long)left)-((Long)right);
		}
		if(left instanceof Long&&right instanceof Float){
			if(type==mul)return((Long)left)*((Float)right);
			if(type==div)return((Long)left)/((Float)right);
			if(type==add)return((Long)left)+((Float)right);
			if(type==sub)return((Long)left)-((Float)right);
		}
		if(left instanceof Long&&right instanceof Integer){
			if(type==mul)return((Long)left)*((Integer)right);
			if(type==div)return((Long)left)/((Integer)right);
			if(type==add)return((Long)left)+((Integer)right);
			if(type==sub)return((Long)left)-((Integer)right);
		}
		if(left instanceof Long&&right instanceof Double){
			if(type==mul)return((Long)left)*((Double)right);
			if(type==div)return((Long)left)/((Double)right);
			if(type==add)return((Long)left)+((Double)right);
			if(type==sub)return((Long)left)-((Double)right);
		}
		
		
		throw new IllegalStateException("ObjectCalculator has taken unsuported or invalid object type! "+left+" or/and "+right);
	}
	
	
	
	
	private static Set<Class> SupportedTypes;
	static{
		SupportedTypes=new HashSet<Class>();
//      SupportedTypes.add(Boolean.class);
//      SupportedTypes.add(Character.class);
//      SupportedTypes.add(Byte.class);
//      SupportedTypes.add(Short.class);
		SupportedTypes.add(Integer.class);
		SupportedTypes.add(Long.class);
		SupportedTypes.add(Float.class);
		SupportedTypes.add(Double.class);
//      SupportedTypes.add(Void.class);
	}
	
	private static boolean isSupported(Class clazz){
        return SupportedTypes.contains(clazz);
    }
}
