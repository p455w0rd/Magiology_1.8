package com.magiology.render.tilerender.hologram;

import net.minecraft.tileentity.TileEntity;

import org.lwjgl.opengl.GL11;

import com.magiology.mcobjects.tileentityes.hologram.RenderObject;
import com.magiology.mcobjects.tileentityes.hologram.TileEntityHologramProjector;
import com.magiology.util.renderers.GL11U;
import com.magiology.util.renderers.TessUtil;
import com.magiology.util.renderers.tessellatorscripts.ComplexCubeModel;
import com.magiology.util.utilclasses.Util;
import com.magiology.util.utilobjects.ColorF;
import com.magiology.util.utilobjects.m_extension.TileEntitySpecialRendererM;

public class RenderHologramProjector extends TileEntitySpecialRendererM{
	
	private TileEntityHologramProjector tile;
	
	@Override
	public void renderTileEntityAt(TileEntity t, double x, double y, double z, float partialTicks){
		tile=(TileEntityHologramProjector)t;
		GL11.glPushMatrix();
		GL11.glTranslated(x,y,z);
		GL11U.texture(false);
		GL11U.lighting(true);
		TessUtil.drawCube(t.getBlockType().getBlockBoundsMinX(),t.getBlockType().getBlockBoundsMinY(),t.getBlockType().getBlockBoundsMinZ(),t.getBlockType().getBlockBoundsMaxX(),t.getBlockType().getBlockBoundsMaxY(),t.getBlockType().getBlockBoundsMaxZ());
		GL11U.SetUpOpaqueRendering(1);
		GL11U.scaled(0.99999);
		ColorF color=new ColorF(Util.fluctuatorSmooth(10, 0)*0.2+tile.mainColor.x,Util.fluctuatorSmooth(35, 0)*0.2+tile.mainColor.y,Util.fluctuatorSmooth(16, 0)*0.2+tile.mainColor.z,0.2);
		color.bind();
		GL11.glTranslatef(tile.offset.x, tile.offset.y-Util.p*1.45F, 0.5F);
		tile.main.draw();
		GL11.glTranslatef(tile.size.x, tile.size.y, 0);
		
		for(RenderObject ro:tile.renderObjects){
			if(ro.host==null)ro.host=tile;
			GL11.glPushMatrix();
			GL11.glTranslatef(ro.offset.x, ro.offset.y, 0);
			ro.render(color);
			GL11.glPopMatrix();
			if(ro.isHighlighted||ro.moveMode){
				TessUtil.getNVB().pushMatrix();
				TessUtil.getNVB().translate(ro.offset.x, ro.offset.y, 0);
				TessUtil.getNVB().cleanUp();
				TessUtil.getNVB().importComplexCube(new ComplexCubeModel(0, 0, -Util.p/2, -ro.size.x, -ro.size.y, Util.p/2));
				TessUtil.getNVB().setDrawModeToWireFrame();
				TessUtil.getNVB().draw();
				TessUtil.getNVB().setDrawModeToQuadPlate();
				TessUtil.getNVB().popMatrix();
			}
		}
		GL11U.culFace(true);
		
		GL11U.EndOpaqueRendering();
		GL11U.texture(true);
		GL11.glPopMatrix();
	}
	
}
