package com.magiology.mcobjects.blocks;

import java.util.ArrayList;
import java.util.List;

import net.minecraft.block.material.Material;
import net.minecraft.entity.player.EntityPlayer;
import net.minecraft.tileentity.TileEntity;
import net.minecraft.util.AxisAlignedBB;
import net.minecraft.util.BlockPos;
import net.minecraft.world.World;

import com.magiology.api.power.ISidedPower;
import com.magiology.core.init.MItems;
import com.magiology.forgepowered.event.ForcePipeUpdate;
import com.magiology.mcobjects.tileentityes.TileEntityFirePipe;
import com.magiology.mcobjects.tileentityes.corecomponents.MultiColisionProvider.MultiColisionProviderRayTracer;
import com.magiology.objhelper.helpers.Helper;

public class FirePipe extends BlockContainerMultiColision{
	
	public FirePipe(){
		super(Material.iron);
		float p= 1F/16F;
		setHardness(10F).setHarvestLevel("pickaxe", 1);
		setBlockBounds(p*6, p*6, p*6, p*10, p*10, p*10);
		useNeighborBrightness=true;
	}
	
	@Override
	public AxisAlignedBB getResetBoundsOptional(World world, BlockPos pos){
		TileEntityFirePipe tile=(TileEntityFirePipe)world.getTileEntity(pos);
		float minX=p*6  -(tile.DCFFL!=null?(p*1.5F):0)  -(tile.connections[5]!=null?(p*6):0);
		float minY=p*6  -(tile.DCFFL!=null?(p*10.7F):0) -(tile.connections[1]!=null?(p*6):0);
		float minZ=p*6  -(tile.DCFFL!=null?(p*1.5F):0)  -(tile.connections[2]!=null?(p*6):0);
		float maxX=p*10 +(tile.DCFFL!=null?(p*1.5F):0)  +(tile.connections[3]!=null?(p*6):0);
		float maxY=p*10                                    +(tile.connections[0]!=null?(p*6):0);
		float maxZ=p*10 +(tile.DCFFL!=null?(p*1.5F):0)  +(tile.connections[4]!=null?(p*6):0);
		return new AxisAlignedBB(minX, minY, minZ, maxX, maxY, maxZ);
	}
	
    @Override
	public boolean onBlockActivated(World world, BlockPos pos, EntityPlayer player, int side, float xHit, float yHit, float zHit){
    	TileEntity test=world.getTileEntity(pos);
    	boolean return1=false;
    	
    	if(test instanceof TileEntityFirePipe){
    		TileEntityFirePipe tile1=(TileEntityFirePipe) test;
    		
    		
    		if(player!=null){
	    		if(Helper.isItemInStack(MItems.FireHammer, player.getHeldItem())){
	    			return1=true;
    				boolean result;
    				TileEntity tile2 = null;
    	    		int id=MultiColisionProviderRayTracer.getPointedId(tile1);
    				double a=0.001;
    				
    				{
    					List<AxisAlignedBB> boxes=new ArrayList<AxisAlignedBB>();
    					tile1.getExpectedBoxesOnSide(boxes, 1);
    					for(AxisAlignedBB box:boxes){
    						if(box.expand(a, a, a).isVecInside(Helper.Vec3M(xHit, yHit, zHit))){
    							tile1.bannedConnections[1]=tile1.connections[1]!=null;
        	    				tile2=world.getTileEntity(x, y-1, z);
        	    				if(tile2 instanceof ISidedPower)((ISidedPower)tile2).setBannedSide(tile1.connections[1]!=null, 0);
    							continue;
    						}
    					}
    				}
    				{
    					List<AxisAlignedBB> boxes=new ArrayList<AxisAlignedBB>();
    					tile1.getExpectedBoxesOnSide(boxes, 0);
    					for(AxisAlignedBB box:boxes){
    						if(box.expand(a, a, a).isVecInside(Helper.Vec3M(xHit, yHit, zHit))){
        	    				tile1.bannedConnections[0]=tile1.connections[0]!=null;
        	    				tile2=world.getTileEntity(x, y+1, z);
        	    				if(tile2 instanceof TileEntityFirePipe)((TileEntityFirePipe)tile2).setBannedSide(tile1.connections[0]!=null, 1);
    							continue;
    						}
    					}
    				}
    				{
    					List<AxisAlignedBB> boxes=new ArrayList<AxisAlignedBB>();
    					tile1.getExpectedBoxesOnSide(boxes, 5);
    					for(AxisAlignedBB box:boxes){
    						if(box.expand(a, a, a).isVecInside(Helper.Vec3M(xHit, yHit, zHit))){
        	    				tile1.bannedConnections[5]=tile1.connections[5]!=null;
        	    				tile2=world.getTileEntity(x-1, y, z);
        	    				if(tile2 instanceof TileEntityFirePipe)((TileEntityFirePipe)tile2).setBannedSide(tile1.connections[5]!=null, 3);
    							continue;
    						}
    					}
    				}
    				{
    					List<AxisAlignedBB> boxes=new ArrayList<AxisAlignedBB>();
    					tile1.getExpectedBoxesOnSide(boxes, 3);
    					for(AxisAlignedBB box:boxes){
    						if(box.expand(a, a, a).isVecInside(Helper.Vec3M(xHit, yHit, zHit))){
        	    				tile1.bannedConnections[3]=tile1.connections[3]!=null;
        	    				tile2=world.getTileEntity(x+1, y, z);
        	    				if(tile2 instanceof TileEntityFirePipe)((TileEntityFirePipe)tile2).setBannedSide(tile1.connections[3]!=null, 5);
    							continue;
    						}
    					}
    				}
    				{
    					List<AxisAlignedBB> boxes=new ArrayList<AxisAlignedBB>();
    					tile1.getExpectedBoxesOnSide(boxes, 2);
    					for(AxisAlignedBB box:boxes){
    						if(box.expand(a, a, a).isVecInside(Helper.Vec3M(xHit, yHit, zHit))){
    							tile1.bannedConnections[2]=tile1.connections[2]!=null;
        	    				tile2=world.getTileEntity(pos-1);
        	    				if(tile2 instanceof TileEntityFirePipe)((TileEntityFirePipe)tile2).setBannedSide(tile1.connections[2]!=null, 4);
    							continue;
    						}
    					}
    				}
    				{
    					List<AxisAlignedBB> boxes=new ArrayList<AxisAlignedBB>();
    					tile1.getExpectedBoxesOnSide(boxes, 4);
    					for(AxisAlignedBB box:boxes){
    						if(box.expand(a, a, a).isVecInside(Helper.Vec3M(xHit, yHit, zHit))){
    							tile1.bannedConnections[4]=tile1.connections[4]!=null;
        	    				tile2=world.getTileEntity(pos+1);
        	    				if(tile2 instanceof TileEntityFirePipe)((TileEntityFirePipe)tile2).setBannedSide(tile1.connections[4]!=null, 2);
    							continue;
    						}
    					}
    				}
    				ForcePipeUpdate.updatein3by3(world, pos);
	    		}
    		}
    	}
    	
    	
        return return1;
    }
    
	@Override
	public TileEntity createNewTileEntity(World var0, int var1){
		return new TileEntityFirePipe();
	}
}