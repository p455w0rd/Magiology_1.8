package com.magiology.forgepowered.event;

import java.util.Arrays;
import java.util.LinkedList;
import java.util.List;
import java.util.Map.Entry;

import net.minecraft.block.Block;
import net.minecraft.client.renderer.ItemModelMesher;
import net.minecraft.client.renderer.block.model.BakedQuad;
import net.minecraft.client.renderer.texture.TextureAtlasSprite;
import net.minecraft.client.renderer.texture.TextureMap;
import net.minecraft.client.resources.model.IBakedModel;
import net.minecraft.client.resources.model.ModelResourceLocation;
import net.minecraft.client.resources.model.SimpleBakedModel;
import net.minecraft.item.Item;
import net.minecraft.item.ItemStack;
import net.minecraft.util.EnumFacing;
import net.minecraftforge.client.event.ModelBakeEvent;
import net.minecraftforge.client.event.TextureStitchEvent;
import net.minecraftforge.fml.common.eventhandler.EventPriority;
import net.minecraftforge.fml.common.eventhandler.SubscribeEvent;

import com.google.common.collect.ImmutableList;
import com.google.common.collect.Lists;
import com.magiology.mcobjects.blocks.BlockM;
import com.magiology.mcobjects.items.ItemM;
import com.magiology.objhelper.Get;

public class ModelGenerator{
    public static TextureAtlasSprite[] icons;


    @SubscribeEvent
    // Allows us to add entries for our icons
    public void textureStitch(TextureStitchEvent.Pre event){

        TextureMap textureMap = event.map;
        for(Entry<Item, ModelResourceLocation> item:ItemM.modelsInit.entrySet()){
            textureMap.registerSprite(item.getValue());
        }
    }

    @SubscribeEvent(priority = EventPriority.LOWEST)
    // This allows us to create and add Baked Models to the registry
    public void bakeModels(ModelBakeEvent event){
    	BlockM.models = new IBakedModel[BlockM.modelsInit.size()];
    	BlockM.invmodels = new IBakedModel[BlockM.modelsInit.size()];
    	
        ItemModelMesher itemModelMesher = Get.Render.IMM();
        for (Entry<Block, ModelResourceLocation> entry : BlockM.modelsInit.entrySet()) {
        	int id=0;
            /// * Block model *
            // get the model registries entry for the current Dense Ore block state
            ModelResourceLocation modelResourceLocation = entry.getValue();

            // get the baked model for the base block state
            IBakedModel baseModel = event.modelManager.getBlockModelShapes().getModelForState(entry.getKey().getDefaultState());

            // generate the new dense ores baked model
            BlockM.models[id] = changeIcon(baseModel, icons[id]);

            // add to the registry
            event.modelRegistry.putObject(modelResourceLocation, BlockM.models[id]);

            /// * Item model *
            // get the item model for the base blocks itemstack
            IBakedModel itemModel = itemModelMesher.getItemModel(new ItemStack(entry.getKey(), 1, 0));

            // generate the item model for the Dense ore block
            BlockM.invmodels[id] = changeIcon(itemModel, icons[id]);

            // this creates the entry for the inventory block
            ModelResourceLocation inventory = new ModelResourceLocation(modelResourceLocation, "inventory");

            // add to registry
            event.modelRegistry.putObject(inventory, BlockM.invmodels[id]);

            // register with the itemModelMesher
            itemModelMesher.register(Item.getItemFromBlock(entry.getKey()), id, inventory);
        }
    }
    public static SimpleBakedModel changeIcon(IBakedModel model, TextureAtlasSprite texture) {
        SimpleBakedModel bakedModel = new SimpleBakedModel(new LinkedList(), newBlankFacingLists(), model.isGui3d(), model.isAmbientOcclusion(), texture, model.getItemCameraTransforms());

        for (Object o : model.getGeneralQuads()) {
            bakedModel.getGeneralQuads().add(changeTexture((BakedQuad) o, texture));
        }

        for (EnumFacing facing : EnumFacing.values()) {
            for (Object o : model.getFaceQuads(facing)) {
                bakedModel.getFaceQuads(facing).add(changeTexture((BakedQuad) o, texture));
            }
        }

        return bakedModel;
    }
    public static List newBlankFacingLists() {
        Object[] list = new Object[EnumFacing.values().length];
        for (int i = 0; i < EnumFacing.values().length; ++i) {
            list[i] = Lists.newLinkedList();
        }

        return ImmutableList.copyOf(list);
    }
    public static BakedQuad changeTexture(BakedQuad quad, TextureAtlasSprite tex) {
        quad = copyQuad(quad);

        // 4 vertexes on each quad
        for (int i = 0; i < 4; ++i) {
            int j = 7 * i;
            // get the x,y,z coordinates
            float x = Float.intBitsToFloat(quad.getVertexData()[j]);
            float y = Float.intBitsToFloat(quad.getVertexData()[j + 1]);
            float z = Float.intBitsToFloat(quad.getVertexData()[j + 2]);
            float u = 0.0F;
            float v = 0.0F;

            // move x,y,z in boundary if they are outside
            if (x < 0 || x > 1) x = (x + 1) % 1;
            if (y < 0 || y > 1) y = (y + 1) % 1;
            if (z < 0 || z > 1) z = (z + 1) % 1;


            // calculate the UVs based on the x,y,z and the 'face' of the quad
            switch (quad.getFace().ordinal()) {
                case 0:
                    u = x * 16.0F;
                    v = (1.0F - z) * 16.0F;
                    break;
                case 1:
                    u = x * 16.0F;
                    v = z * 16.0F;
                    break;
                case 2:
                    u = (1.0F - x) * 16.0F;
                    v = (1.0F - y) * 16.0F;
                    break;
                case 3:
                    u = x * 16.0F;
                    v = (1.0F - y) * 16.0F;
                    break;
                case 4:
                    u = z * 16.0F;
                    v = (1.0F - y) * 16.0F;
                    break;
                case 5:
                    u = (1.0F - z) * 16.0F;
                    v = (1.0F - y) * 16.0F;
            }

            // set the new texture uvs
            quad.getVertexData()[j + 4] = Float.floatToRawIntBits(tex.getInterpolatedU(u));
            quad.getVertexData()[j + 4 + 1] = Float.floatToRawIntBits(tex.getInterpolatedV(v));
        }

        return quad;
    }
    public static BakedQuad copyQuad(BakedQuad quad) {
        return new BakedQuad(Arrays.copyOf(quad.getVertexData(), quad.getVertexData().length), quad.getTintIndex(), quad.getFace());
    }
}