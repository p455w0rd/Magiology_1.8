package com.magiology.objhelper.helpers.renderers;

import java.util.ArrayList;
import java.util.List;

import org.lwjgl.opengl.GL11;
import org.lwjgl.util.vector.Vector3f;

import com.magiology.objhelper.Get.Render;
import com.magiology.objhelper.vectors.Vec3M;

public class NoramlisedVertixBufferModel extends NoramlisedVertixBuffer{
	private boolean isInit=false;
	
	
	protected static NoramlisedVertixBufferModel create(){
		return new NoramlisedVertixBufferModel();
	}
	private NoramlisedVertixBufferModel(){
		this.renderer=Render.WR();
		
	}
	@Override
	public void draw(){
		if(willDrawAsAWireFrame){
			GL11H.texture(false);
			startRecordingTesselator(GL11.GL_LINES);
			pasteToTesselator(false);
			renderToScreen();
			GL11H.texture(true);
		}else{
			startRecordingTesselator(GL11.GL_TRIANGLES);
			pasteToTesselator(true);
			renderToScreen();
		}
	}
	protected void init(List<ShadedTriangle> shadedTriangles){
		if(isInit)return;isInit=true;
		this.shadedTriangles=new ArrayList<ShadedTriangle>();
		this.shadedTriangles.addAll(shadedTriangles);
	}
	@Override
	public void pasteToTesselator(boolean type){
		for(ShadedTriangle a:shadedTriangles){
			if(type){
					Vec3M finalNormal=GL11H.transformVector(new Vec3M(a.normal.x, a.normal.y, a.normal.z), new Vector3f(),rotation.x,rotation.y,rotation.z,1);
					renderer.setNormal((float)finalNormal.x, (float)finalNormal.y, (float)finalNormal.z);
				for(int b=0;b<a.pos3.length;b++){
					
					
					
					Vec3M finalVec=GL11H.transformVector(new Vec3M(a.pos3[b].vector3D.xCoord, a.pos3[b].vector3D.yCoord, a.pos3[b].vector3D.zCoord), transformation);
					if(NULL_UV_ID==a.pos3[b].texturePositionX&&NULL_UV_ID==a.pos3[b].texturePositionY){
						renderer.addVertex(finalVec.x, finalVec.y, finalVec.z);
					}
					renderer.addVertexWithUV(finalVec.x, finalVec.y, finalVec.z, a.pos3[b].texturePositionX, a.pos3[b].texturePositionY);
				}
			}else{
				renderer.addVertexWithUV(a.pos3[0].vector3D.xCoord, a.pos3[0].vector3D.yCoord, a.pos3[0].vector3D.zCoord, a.pos3[0].texturePositionX, a.pos3[0].texturePositionY);
				renderer.addVertexWithUV(a.pos3[1].vector3D.xCoord, a.pos3[1].vector3D.yCoord, a.pos3[1].vector3D.zCoord, a.pos3[1].texturePositionX, a.pos3[1].texturePositionY);
				
				renderer.addVertexWithUV(a.pos3[1].vector3D.xCoord, a.pos3[1].vector3D.yCoord, a.pos3[1].vector3D.zCoord, a.pos3[1].texturePositionX, a.pos3[1].texturePositionY);
				renderer.addVertexWithUV(a.pos3[2].vector3D.xCoord, a.pos3[2].vector3D.yCoord, a.pos3[2].vector3D.zCoord, a.pos3[2].texturePositionX, a.pos3[2].texturePositionY);
				
//				tessellator.addVertexWithUV(a.pos3[2].vector3D.xCoord, a.pos3[2].vector3D.yCoord, a.pos3[2].vector3D.zCoord, a.pos3[2].texturePositionX, a.pos3[2].texturePositionY);
//				tessellator.addVertexWithUV(a.pos3[0].vector3D.xCoord, a.pos3[0].vector3D.yCoord, a.pos3[0].vector3D.zCoord, a.pos3[0].texturePositionX, a.pos3[0].texturePositionY);
			}
			
		}
	}
}